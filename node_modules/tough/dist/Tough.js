'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _deepSearch = require('./helpers/deepSearch');

var _deepSearch2 = _interopRequireDefault(_deepSearch);

var _types = require('./helpers/types');

var _types2 = _interopRequireDefault(_types);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Tough = function () {
    function Tough(query, elements) {
        _classCallCheck(this, Tough);

        this.elements = elements;
        if (query) this.select(query);
    }

    _createClass(Tough, [{
        key: 'select',
        value: function select(query) {
            var steps = query.split(/{(.*?)}/);
            for (var i = 0; i < steps.length; i++) {
                var selector = steps[i].trim();
                if (selector === '') continue;
                var isMeta = i % 2 === 1;
                if (isMeta) this.type(selector);else this.query(selector);
            }
            return this;
        }
    }, {
        key: 'query',
        value: function query(_query) {
            var elements = [];
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.elements[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var element = _step.value;

                    var inside = element.querySelectorAll(_query);
                    inside.forEach(function (item) {
                        return elements.push(item);
                    });
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            this.elements = elements;
            return this;
        }
    }, {
        key: 'search',
        value: function search(options) {
            this.elements = (0, _deepSearch2.default)(this.elements, options);
            return this;
        }
    }, {
        key: 'type',
        value: function type(_type) {
            if (_type in _types2.default) this.query(_types2.default[_type].join(', '));
            return this;
        }
    }, {
        key: 'get',
        value: function get(index) {
            return this.elements[index];
        }
    }, {
        key: 'each',
        value: function each(cb) {
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = this[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var element = _step2.value;
                    cb(element);
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            return this;
        }
    }, {
        key: Symbol.iterator,
        value: function value() {
            var _this = this;

            var i = 0;
            return {
                next: function next() {
                    return { value: _this.elements[i++], done: !_this.elements[i - 1] };
                }
            };
        }
    }, {
        key: Symbol.toPrimitive,
        value: function value(hint) {
            if (hint === 'number') {
                return this.elements.length;
            } else if (hint === 'string') {
                var tags = this.elements.map(function (element) {
                    return element.tagName.toLowerCase();
                });
                return '[' + tags.join(', ') + ']';
            } else {
                return this.elements.length > 0;
            }
        }
    }, {
        key: 'length',
        get: function get() {
            return this.elements.length;
        }
    }]);

    return Tough;
}();

exports.default = Tough;