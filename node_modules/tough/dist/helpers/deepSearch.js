"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _conditions = require("./conditions");

var deepSearch = function deepSearch(elements) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var result = [];
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = elements[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var element = _step.value;

            var searchResult = deepSearchFromOneBranch(element, options);
            if (searchResult) {
                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = undefined;

                try {
                    for (var _iterator2 = searchResult[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                        var res = _step2.value;
                        result.push(res);
                    }
                } catch (err) {
                    _didIteratorError2 = true;
                    _iteratorError2 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion2 && _iterator2.return) {
                            _iterator2.return();
                        }
                    } finally {
                        if (_didIteratorError2) {
                            throw _iteratorError2;
                        }
                    }
                }
            }
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }

    return result;
};

var deepSearchFromOneBranch = function deepSearchFromOneBranch(element) {
    var conditions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var answers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

    var condition = (0, _conditions.check)(element, conditions);

    // Going deep
    if (condition) {
        var isInside = false;
        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
            for (var _iterator3 = element.children[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                var child = _step3.value;

                if (deepSearchFromOneBranch(child, conditions, answers)) isInside = true;
            }
        } catch (err) {
            _didIteratorError3 = true;
            _iteratorError3 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion3 && _iterator3.return) {
                    _iterator3.return();
                }
            } finally {
                if (_didIteratorError3) {
                    throw _iteratorError3;
                }
            }
        }

        if (!isInside) answers.push(element);
        return answers;
    }
    return false;
};

exports.default = deepSearch;